// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

// NOTE: The if logics are sequential, starting from zeroing (zx), then taking inverse (nx),..., to inversing output (no)

  CHIP ALU {
    IN 
      x[16], y[16], //16-bit inputs
      zx, // if zx == 1 then x = 0 (base 10)
      nx, // if nx == 1 then x = !x (NOT(x)). NOTE: zx takes precedence over nx
      zy, // if zy == 1 then y = 0 (base 10)
      ny, // if ny == 1 then y = !y 
      f, // if f == 1 then out = x + y, else out = x & y
      no; // if no == 1 then  out = !out

    OUT 
      out[16], // 16-bit output
      zr, // if out == 0, then 1, else 0
      ng; // if out < 0, then 1, else 0

    PARTS:
    // x
    Mux16(a=x, b=false, sel=zx, out=x1);
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);
    // y
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);
    // output
    And16(a=x2, b=y2, out=z1);
    Add16(a=x2, b=y2, out=z2);
    Mux16(a=z1, b=z2, sel=f, out=w1);
    Not16(in=w1, out=notw1);
    Mux16(a=w1, b=notw1, sel=no, out=output);
    // 
    IsZero16(in=output, out=zr);
    IsNegative16(in=output, out=ng);
    Identity16(in=output, out=out);
  }